View(ticker_tbl)
apply(ticker_tbl, ~str_c(., ".KS"))
map(ticker_tbl, ~str_c(., ".KS"))
map(ticker_tbl, ~str_c(., ".KS"))$ticker_num
map(ticker_num, ~str_c(., ".KS"))
map_chr(ticker_num, ~str_c(., ".KS"))
ticker_num = map_chr(ticker_num, ~str_c(., ".KS"))
ticker_tbl = tibble(ticker_num)
View(ticker_tbl)
ticker_num = c(000120, 004020, 005930, 007070, 008770,
012450, 012510, 017810, 035420, 053800,
078930, 086280, 096530, 108320, 139480,
161510, 192090, 241560, 253450, 294870,
319640, 520006)
ticker_num = as.character(ticker_num)
ticker_num = map_chr(ticker_num, ~str_c(., ".KS"))
ticker_tbl = tibble(ticker_num)
ticker_num = map_chr(as.character(ticker_num), ~str_c(., ".KS"))
ticker_num = c(000120, 004020, 005930, 007070, 008770,
012450, 012510, 017810, 035420, 053800,
078930, 086280, 096530, 108320, 139480,
161510, 192090, 241560, 253450, 294870,
319640, 520006)
ticker_num = as.character(ticker_num)
ticker_num = c(000120, 004020, 005930, 007070, 008770,
012450, 012510, 017810, 035420, 053800,
078930, 086280, 096530, 108320, 139480,
161510, 192090, 241560, 253450, 294870,
319640, 520006)
ticker_num = as.character(ticker_num)
ticker_num = c(000120, 004020, 005930, 007070, 008770,
012450, 012510, 017810, 035420, 053800,
078930, 086280, 096530, 108320, 139480,
161510, 192090, 241560, 253450, 294870,
319640, 520006)
ticker_num
ticker_num = c("000120", "004020", "005930", "007070", "008770",
"012450", "012510", "017810", "035420", "053800",
"078930", "086280", "096530", "108320", "139480",
"161510", "192090", "241560", "253450", "294870",
"319640", "520006")
ticker_num = map_chr(as.character(ticker_num), ~str_c(., ".KS"))
ticker_tbl = tibble(ticker_num)
View(ticker_tbl)
ticker_num
ticker_num[[1]]
library(quantmod)
library(tidyverse)
quantmod::getSymbols(ticker_num[[1]])
quantmod::Ad(`000120.KS`)
ticker_nh_basic = c("000120", "004020", "005930", "007070", "008770",
"012450", "012510", "017810", "035420", "053800",
"078930", "086280", "096530", "108320", "139480",
"161510", "192090", "241560", "253450", "294870",
"319640", "520006")
ticker_nh_isa = c("007310", "006570", "069260", "088350", "091170",
"245710", "251600", "267980", "272550", "400570")
quantmod::getSymbols("DPW.DE")
chart_Series(Ad(`DPW.DE`))
ticker_nh_basic = c("000120", "004020", "005930", "007070", "008770",
"012450", "012510", "017810", "035420", "053800",
"078930", "086280", "096530", "108320", "139480",
"161510", "192090", "241560", "253450", "294870",
"319640", "520006", "CPNG", "EWT", "ESGE",
"ESGU", "ORCL", "U")
ticker_nh_cma = c("XM")
ticker_mirae = c("150900", "MSFT", "FDX", "LDEM", "NTAP",
"WM", "ESGD", "DPW.DE")
ticker_ministock = c("HON", "AAPL", "PYPL", "COST", "NOW",
"VMW", "EA", "NVDA", "BLK", "DD",
"IBM", "DDOG", "ORCL", "ACN", "DPZ",
"CVS", "CSCO", "PG", "JNJ", "ADSK",
"KMB", "KD")
ticker_tickle = c("CRM", "AMZN", "TSLA", "NFLX", "IBM",
"AAPL", "LUV", "WMT")
ticker_nh_basic = c("000120", "004020", "005930", "007070", "008770",
"012450", "012510", "017810", "035420", "053800",
"078930", "086280", "096530", "108320", "139480",
"161510", "192090", "241560", "253450", "294870",
"319640", "520006", "CPNG", "EWT", "ESGE",
"ESGU", "ORCL", "U")
ticker_mirae = c("150900", "MSFT", "FDX", "LDEM", "NTAP",
"WM", "ESGD", "DPW.DE")
ticker_ministock = c("HON", "AAPL", "PYPL", "COST", "NOW",
"VMW", "EA", "NVDA", "BLK", "DD",
"IBM", "DDOG", "ORCL", "ACN", "DPZ",
"CVS", "CSCO", "PG", "JNJ", "ADSK",
"KMB", "KD")
ticker_tickle = c("CRM", "AMZN", "TSLA", "NFLX", "IBM",
"AAPL", "LUV", "WMT")
quantmod::Op(ticker_tickle[[1]])
quantmod::Ad(ticker_tickle[[1]]) %>% head(10)
quantmod::Ad(ticker_tickle[[1]])
quantmod::getPrice(ticker_tickle[[1]])
quantmod::getSymbols(ticker_tickle[[1]])
View(CRM)
quantmod::getFinancials(ticker_tickle[[1]])
quantmod::getFinancials(ticker_tickle[[1]], src = "Quandl")
quantmod::getFin(ticker_tickle[[1]])
quantmod::getDefaults(ticker_tickle[[1]])
library(quantmod)
library(tidyverse)
ticker_nh_basic = c("000120", "004020", "005930", "007070", "008770",
"012450", "012510", "017810", "035420", "053800",
"078930", "086280", "096530", "108320", "139480",
"161510", "192090", "241560", "253450", "294870",
"319640", "520006", "CPNG", "EWT", "ESGE",
"ESGU", "ORCL", "U")
ticker_nh_isa = c("007310", "006570", "069260", "088350", "091170",
"245710", "251600", "267980", "272550", "400570")
ticker_nh_cma = c("XM")
ticker_mirae = c("150900", "MSFT", "FDX", "LDEM", "NTAP",
"WM", "ESGD", "DPW.DE")
ticker_ministock = c("HON", "AAPL", "PYPL", "COST", "NOW",
"VMW", "EA", "NVDA", "BLK", "DD",
"IBM", "DDOG", "ORCL", "ACN", "DPZ",
"CVS", "CSCO", "PG", "JNJ", "ADSK",
"KMB", "KD")
ticker_tickle = c("CRM", "AMZN", "TSLA", "NFLX", "IBM",
"AAPL", "LUV", "WMT")
quantmod::getSymbols("DPW.DE")
down_url = "http://data.krx.co.kr/comm/bldAttendant/getJsonData.cmd"
referer = list(
bId  = "dbms/MDC/STAT/standard/MDCSTAT03901",
mktId = "STK",
trdDd = "20211126",
money = "1",
csvxls_isNo = "false"
)
library(httr)
library(rvest)
library(readr)
query = list(
bId  = "dbms/MDC/STAT/standard/MDCSTAT03901",
mktId = "STK",
trdDd = "20211126",
money = "1",
csvxls_isNo = "false"
)
otp = POST(down_url, query = query)
otp = POST(down_url, query = query) %>%
read_html()
View(otp)
POST(down_url, query = query) %>%
read_html() %>%
html_text()
down_url = "http://data.krx.co.kr/comm/fileDn/GenerateOTP/generate.cmd"
query = list(
bId  = "dbms/MDC/STAT/standard/MDCSTAT03901",
mktId = "STK",
trdDd = "20211126",
money = "1",
name = "fileDown",
csvxls_isNo = "false"
)
POST(down_url, query = query) %>%
read_html() %>%
html_text()
otp = POST(down_url, query = query) %>%
read_html() %>%
html_text()
gen_otp_url = "http://data.krx.co.kr/comm/fileDn/GenerateOTP/generate.cmd"
query = list(
bId  = "dbms/MDC/STAT/standard/MDCSTAT03901",
mktId = "STK",
trdDd = "20211126",
money = "1",
name = "fileDown",
csvxls_isNo = "false"
)
otp = POST(gen_otp_url, query = query) %>%
read_html() %>%
html_text()
down_url = 'http://data.krx.co.kr/comm/fileDn/download_csv/download.cmd'
POST(down_url,
query = list(code = otp),
add_headers(referer = gen_otp_url)) %>%
read_html(encoding = "EUC-KR") %>%
html_text()
POST(down_url,
query = list(code = otp),
add_headers(referer = gen_otp_url)) %>%
read_html(encoding = "EUC-KR") %>%
html_text() %>%
read_csv()
POST(down_url,
query = list(code = otp),
add_headers(referer = gen_otp_url)) %>%
read_html() %>%
html_text() %>%
read_csv()
POST(down_url,
query = list(code = otp),
add_headers(referer = gen_otp_url)) %>%
read_html(encoding = "euc-kr") %>%
html_text() %>%
read_csv()
POST(down_url,
query = list(code = otp),
add_headers(referer = gen_otp_url))
POST(down_url,
query = list(code = otp),
add_headers(referer = gen_otp_url)) %>%
read_html(encoding = "utf-8") %>%
html_text() %>%
read_csv()
POST(down_url,
query = list(code = otp),
add_headers(referer = gen_otp_url)) %>%
read_html(encoding = "euc-kr") %>%
html_text()
POST(down_url,
query = list(code = otp),
add_headers(referer = gen_otp_url)) %>%
read_html(encoding = "euc-kr")
POST(down_url,
query = list(code = otp),
add_headers(referer = gen_otp_url)) %>%
read_html(encoding = "utf-8")
POST(down_url,
query = list(code = otp),
add_headers(referer = gen_otp_url))
POST(down_url,
query = list(code = otp),
add_headers(referer = gen_otp_url)) %>%
typeof()
POST(down_url,
query = list(code = otp),
add_headers(referer = gen_otp_url)) %>%
length()
POST(down_url,
query = list(code = otp),
add_headers(referer = gen_otp_url)) %>%
.[[1]]
POST(down_url,
query = list(code = otp),
add_headers(referer = gen_otp_url)) %>%
.[[1]] %>%
read_csv(.)
POST(down_url,
query = list(code = otp),
add_headers(referer = gen_otp_url)) %>%
.[[1]] %>%
# read_html(encoding = "utf-8") %>%
html_text() %>%
read_csv()
POST(down_url,
query = list(code = otp),
add_headers(referer = gen_otp_url)) %>%
.[[1]] %>%
# read_html(encoding = "utf-8") %>%
html_text()
POST(down_url,
query = list(code = otp),
add_headers(referer = gen_otp_url)) %>%
.[[1]] %>%
read_html(encoding = "utf-8") %>%
html_text() %>%
read_csv()
POST(down_url,
query = list(code = otp),
add_headers(referer = gen_otp_url)) %>%
read_html(encoding = "utf-8") %>%
html_text() %>%
read_csv()
POST(down_url,
query = list(code = otp),
add_headers(referer = gen_otp_url)) %>%
read_html(encoding = "EUC-KR") %>%
html_text() %>%
read_csv()
POST(down_url,
query = list(code = otp),
add_headers(referer = gen_otp_url)) %>%
read_html(encoding = "EUC-KR") %>%
html_text()
POST(down_url,
query = list(code = otp),
add_headers(referer = gen_otp_url)) %>%
read_html(encoding = "EUC-KR") %>%
.[[1]]
POST(down_url,
query = list(code = otp),
add_headers(referer = gen_otp_url)) %>%
.[[1]]
read_csv(.)
POST(down_url,
query = list(code = otp),
add_headers(referer = gen_otp_url)) %>%
.[[1]] %>%
read_csv(.)
link = POST(down_url,
query = list(code = otp),
add_headers(referer = gen_otp_url)) %>%
.[[1]]
link
read_csv(link)
gen_otp_url = "http://data.krx.co.kr/comm/fileDn/GenerateOTP/generate.cmd"
query = list(
bId  = "dbms/MDC/STAT/standard/MDCSTAT03901",
mktId = "STK",
trdDd = "20211126",
money = "1",
name = "fileDown",
csvxls_isNo = "false"
)
library(httr)
library(rvest)
library(readr)
otp = POST(gen_otp_url, query = query) %>%
read_html() %>%
html_text()
down_url = 'http://data.krx.co.kr/comm/fileDn/download_csv/download.cmd'
POST(down_url, query = list(code = otp),
add_headers(referer = gen_otp_url)) %>%
read_html(encoding = 'EUC-KR') %>%
html_text() %>%
read_csv()
POST(down_url, query = list(code = otp),
add_headers(referer = gen_otp_url)) %>%
read_html(encoding = 'EUC-KR')
POST(down_url, query = list(code = otp),
add_headers(referer = gen_otp_url))
query = list(
mktId = "STK",
trdDd = "20211126",
money = "1",
name = "fileDown",
csvxls_isNo = "false",
url = "dbms/MDC/STAT/standard/MDCSTAT03901"
)
library(httr)
library(rvest)
library(readr)
otp = POST(gen_otp_url, query = query) %>%
read_html() %>%
html_text()
down_url = 'http://data.krx.co.kr/comm/fileDn/download_csv/download.cmd'
POST(down_url, query = list(code = otp),
add_headers(referer = gen_otp_url)) %>%
read_html(encoding = 'EUC-KR') %>%
html_text() %>%
read_csv()
gen_otp_data = list(
mktId = 'KSQ', # 코스닥으로 변경
trdDd = '20210108',
money = '1',
csvxls_isNo = 'false',
name = 'fileDown',
url = 'dbms/MDC/STAT/standard/MDCSTAT03901'
)
otp = POST(gen_otp_url, query = gen_otp_data) %>%
read_html() %>%
html_text()
down_sector_KQ = POST(down_url, query = list(code = otp),
add_headers(referer = gen_otp_url)) %>%
read_html(encoding = 'EUC-KR') %>%
html_text() %>%
read_csv()
down_sector_KS = POST(down_url, query = list(code = otp),
add_headers(referer = gen_otp_url)) %>%
read_html(encoding = 'EUC-KR') %>%
html_text() %>%
read_csv()
```{r}
gen_otp_url = "http://data.krx.co.kr/comm/fileDn/GenerateOTP/generate.cmd"
query = list(
mktId = "STK",
trdDd = "20211126",
money = "1",
name = "fileDown",
csvxls_isNo = "false",
url = "dbms/MDC/STAT/standard/MDCSTAT03901"
)
library(httr)
library(rvest)
library(readr)
otp = POST(gen_otp_url, query = query) %>%
read_html() %>%
html_text()
down_url = 'http://data.krx.co.kr/comm/fileDn/download_csv/download.cmd'
down_sector_KS = POST(down_url, query = list(code = otp),
add_headers(referer = gen_otp_url)) %>%
read_html(encoding = 'EUC-KR') %>%
html_text() %>%
read_csv()
gen_otp_data = list(
mktId = 'KSQ', # 코스닥으로 변경
trdDd = '20210108',
money = '1',
csvxls_isNo = 'false',
name = 'fileDown',
url = 'dbms/MDC/STAT/standard/MDCSTAT03901'
)
otp = POST(gen_otp_url, query = gen_otp_data) %>%
read_html() %>%
html_text()
down_sector_KQ = POST(down_url, query = list(code = otp),
add_headers(referer = gen_otp_url)) %>%
read_html(encoding = 'EUC-KR') %>%
html_text() %>%
read_csv()
View(down_sector_KS)
View(down_sector_KQ)
13 * sqrt(32)
13 * sqrt(59)
loans_income
library(ggplot2)
loans_income
setwd("/Volumes/Samsung_T5/S4DS/practical-statistics-for-data-scientists/data")
libarary(tidyverse)
library(tidyverse)
loans_income = read_csv("loans_income.csv")
loans_income
samp_data = data.frame(income = sample(loans_income, 1000),
type = "data_dist")
nrow(loans_income)
samp_data = data.frame(income = sample(loans_income, size =1000),
type = "data_dist")
sample(loans_income, 1000)
sample(loans_income, 1000, replace = TRUE)
samp_data = tibble(income = sample(loans_income, size =1000),
type = "data_dist")
loans_income = read.csv("loans_income.csv")
samp_data = tibble(income = sample(loans_income, size =1000),
type = "data_dist")
samp_data = data.frame(income = sample(loans_income, size =1000),
type = "data_dist")
View(loans_income)
samp_data = data.frame(income = sample(loans_income$x, size =1000),
type = "data_dist")
View(samp_data)
samp_mean_05 = data.frame(
income = tapply(sample(loans_income, 1000*5),
rep(1:1000, rep(5,1000)), FUN = mean)
)
samp_mean_05 = data.frame(
income = tapply(sample(loans_income, 1000*5),
rep(1:1000, rep(5,1000)), FUN = mean)
)
samp_mean_05 = data.frame(
income = tapply(sample(loans_income$x, 1000*5),
rep(1:1000, rep(5,1000)), FUN = mean)
)
View(samp_mean_05)
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
r_to_py(loans_income)
reticulate::r_to_py(loans_income)
loans_income = reticulate::r_to_py(loans_income)
reticulate::repl_python()
rep(1:1000, rep(5, 1000))
rep(5, 1000)
rep(1:1000, rep(5, 1000))
tibble(x = rep(1:1000, rep(5, 1000)))
View(samp_mean_05)
library(boot)
stat_fun = function(x, idx) median(x[idx])
boot(loans_income, R = 1000)
boot(loans_income, R = 1000, statistic = stat_fun)
library(rsample)
bootstraps(loans_income, times = 25)
View(loans_income)
loans_income = read_csv("loans_income.csv")
bootstraps(loans_income, times = 25)
boot_obj = bootstraps(loans_income, times = 25)
purrr::map_dbl(boot_obj$splits,
function(x, idx) median(x[idx]))
View(loans_income)
purrr::map_dbl(boot_obj$splits,
function(x){
dat = as.data.frame(x)$x
median(dat)
})
purrr::map_dbl(boot_obj$splits,
function(x){
dat = as.data.frame(x)$x
median(dat)
}) %>%
as_tibble()
purrr::map_dbl(boot_obj$splits,
function(x){
dat = as.data.frame(x)$x
median(dat)
}) %>%
as_tibble() %>%
mutate(bias = value - 62000)
purrr::map_dbl(boot_obj$splits,
function(x){
dat = as.data.frame(x)$x
median(dat)
}) %>%
as_tibble() %>%
mutate(bias = value - 62000) %>%
summarise(sd(value))
purrr::map_dbl(boot_obj$splits,
function(x){
dat = as.data.frame(x)$x
median(dat)
}) %>%
as_tibble() %>%
mutate(bias = value - 62000)
summarise(sum(bias) / nrow(.), sd(value))
purrr::map_dbl(boot_obj$splits,
function(x){
dat = as.data.frame(x)$x
median(dat)
}) %>%
as_tibble() %>%
mutate(bias = value - 62000) %>%
summarise(sum(bias) / nrow(.), sd(value))
